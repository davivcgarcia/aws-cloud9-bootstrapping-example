---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for container workshops (ECS/EKS) Cloud9 environment.
Parameters:
  ContainerWorkshopC9InstanceType:
    Description: Container Workshop Cloud9 instance type.
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.micro
      - t3.small
      - m5.large
    ConstraintDescription: Must be a valid Cloud9 instance type.
  ContainerWorkshopC9EnvType: 
    Description: Cloud9 environment owner.
    Default: self
    Type: String
    AllowedValues: 
      - self
      - 3rdParty
    ConstraintDescription: Must specify self or 3rdParty.
  ContainerWorkshopOwnerArn: 
    Type: String
    Description: The ARN of the Cloud9 owner to be set if 3rdParty deployment.
    Default: ""
  ContainerWorkshopC9InstanceVolumeSize: 
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume. 
    Default: 30

Conditions: 
  Create3rdPartyResources: !Equals [ !Ref ContainerWorkshopC9EnvType, 3rdParty ]

Resources:
################## PERMISSIONS AND ROLES #################
  ContainerWorkshopC9Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: Container Workshop
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  ContainerWorkshopC9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - ContainerWorkshopC9LambdaPolicy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"

################## LAMBDA BOOTSTRAP FUNCTION ################

  ContainerWorkshopC9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::ContainerWorkshopC9BootstrapInstanceLambda
    DependsOn:
    - ContainerWorkshopC9BootstrapInstanceLambdaFunction
    - ContainerWorkshopC9Instance
    - ContainerWorkshopC9InstanceProfile
    - ContainerWorkshopC9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: Container Workshop
      ServiceToken:
        Fn::GetAtt:
        - ContainerWorkshopC9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: ContainerWorkshopC9Instance
      LabIdeInstanceProfileName:
        Ref: ContainerWorkshopC9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
        - ContainerWorkshopC9InstanceProfile
        - Arn

  ContainerWorkshopC9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: Container Workshop
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - ContainerWorkshopC9LambdaExecutionRole
        - Arn
      Runtime: python3.6
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          
          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}
          
              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
          
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))
          
                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
          
                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))
          
                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')
  
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      # logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
################## SSM BOOTSRAP HANDLER ###############
  ContainerWorkshopC9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  ContainerWorkshopC9SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      Tags:
        - Key: Environment
          Value: Container Workshop
      Content: Yaml
      DocumentType: Command
      Content: 
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: ContainerWorkshopC9bootstrap
          inputs:
            runCommand:
            - |
              #! /bin/bash
              #
              # About: Unified shell script to simplify AWS CloudShell/Cloud9 tooling bootstraping
              # Author: Davi Garcia (davivcgarcia)
              #
              # Usage: $ source <(curl -sL https://bit.ly/aws-cloud-bootstrapper)
              # 

              #
              # Creates directory structure in the persistent storage mount
              #

              mkdir -p $HOME/{.local/bin,.config}

              #
              # Updates system packages (only for Cloud9)
              #

              if [[ "$AWS_EXECUTION_ENV" != "CloudShell" ]]
              then
                  sudo yum -y update &> /dev/null
              fi

              #
              # Installs required packages
              #

              sudo yum install -y bash-completion openssl vim git jq yq gettext moreutils perl-Digest-SHA &> /dev/null

              #
              # Adds workaround for "bash-completion" if on AWS CloudShell
              #

              if [[ "$AWS_EXECUTION_ENV" == "CloudShell" ]]
              then
                  if ! grep -q "YUM Workaround"  $HOME/.bashrc
                  then
                      echo -e "\n# YUM Workaround" >> $HOME/.bashrc
                      echo "sudo yum install -y bash-completion &> /dev/null" >> $HOME/.bashrc
                  fi
              fi

              #
              # Loads Bash Completion helpers
              #

              . /etc/profile.d/bash_completion.sh

              #
              # Installs AWS CLI v2 (aws) if not on AWS CloudShell
              #

              if [[ "$AWS_EXECUTION_ENV" != "CloudShell" ]]
              then
                  curl --silent --location "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
                  unzip -o /tmp/awscliv2.zip
                  sudo ./aws/install --update
                  rm -rf ./aws
              fi

              #
              # Installs Amazon EKS CLI (eksctl)
              #

              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              mv /tmp/eksctl $HOME/.local/bin
              chmod +x $HOME/.local/bin/eksctl
              $HOME/.local/bin/eksctl completion bash >> $HOME/.config/bash_completion
              . <($HOME/.local/bin/eksctl completion bash)

              #
              # Installs Kubernetes CLI (kubectl)
              #

              curl --silent --location "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" -o "/tmp/kubectl"
              mv /tmp/kubectl $HOME/.local/bin
              chmod +x $HOME/.local/bin/kubectl
              $HOME/.local/bin/kubectl completion bash >> $HOME/.config/bash_completion
              . <($HOME/.local/bin/kubectl completion bash)

              #
              # Installs Helm v3 CLI (helm)
              #

              curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
              chmod 700 /tmp/get_helm.sh
              HELM_INSTALL_DIR=$HOME/.local/bin/ /tmp/get_helm.sh &> /dev/null
              $HOME/.local/bin/helm completion bash >> $HOME/.config/bash_completion
              . <($HOME/.local/bin/helm completion bash)
              rm -rf /tmp/get_helm.sh

              #
              # Install FluxCD v2 CLI (flux)
              #

              curl -sLo /tmp/flux-install.sh https://fluxcd.io/install.sh
              chmod 700 /tmp/flux-install.sh
              /tmp/flux-install.sh $HOME/.local/bin/ &> /dev/null
              $HOME/.local/bin/flux completion bash >> $HOME/.config/bash_completion 
              . <($HOME/.local/bin/flux completion bash)
              rm -rf /tmp/flux-install.sh

              #
              # Install AWS Copilot CLI (copilot)
              #

              curl -sLo /tmp/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
              mv /tmp/copilot $HOME/.local/bin
              chmod +x $HOME/.local/bin/copilot
              $HOME/.local/bin/copilot completion bash >> $HOME/.config/bash_completion
              . <($HOME/.local/bin/copilot completion bash)

              #
              # Define standard AWS envinronment variables
              #

              if ! grep -q "AWS Common Variables" $HOME/.bashrc
              then
                  export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                  export AWS_REGION=$(aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]')
                  export AWS_AZS=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[].ZoneName' --output text --region $AWS_REGION)
                  
                  echo -e "\n# AWS Common Variables" >> $HOME/.bashrc
                  echo "export ACCOUNT_ID=${ACCOUNT_ID}" >> $HOME/.bashrc
                  echo "export AWS_REGION=${AWS_REGION}" >> $HOME/.bashrc
                  echo "export AWS_AZS=(${AWS_AZS[@]})" >> $HOME/.bashrc
              fi

              #
              # Configure AWS CLI
              #

              aws configure set default.region ${AWS_REGION}
  
  ContainerWorkshopC9BootstrapAssociation: 
    Type: AWS::SSM::Association
    DependsOn: ContainerWorkshopC9OutputBucket 
    Properties: 
      Name: !Ref ContainerWorkshopC9SSMDocument
      OutputLocation: 
        S3Location:
          OutputS3BucketName: !Ref ContainerWorkshopC9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
          - Active

################## INSTANCE #####################
  ContainerWorkshopC9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: ContainerWorkshopC9Role

  ContainerWorkshopC9Instance:
    Description: "-"
    DependsOn: ContainerWorkshopC9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for ContainerWorkshops
      AutomaticStopTimeMinutes: 3600
      InstanceType:
        Ref: ContainerWorkshopC9InstanceType
      Name:
        Ref: AWS::StackName
      OwnerArn: !If [Create3rdPartyResources, !Ref ContainerWorkshopOwnerArn, !Ref "AWS::NoValue" ]
      Tags: 
        - Key: SSMBootstrap
          Value: Active
        - Key: Environment
          Value: Container Workshop

Outputs: 
  Cloud9IDE:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/cloud9/ide/"
        - Ref: ContainerWorkshopC9Instance
        - "?region="
        - Ref: AWS::Region